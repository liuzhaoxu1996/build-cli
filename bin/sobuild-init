#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const localPath = require('../lib/local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

program
    .usage('<template-name> [project-name]')
    .option('-c, --clone', 'use git clone')
    .option('--offline', 'use cached template')


program.on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # create a new project with an official template'))
    console.log('    $ sobuild init webpack my-project')
    console.log()
    console.log(chalk.gray('    # create a new project straight from a github template'))
    console.log('    $ sobuild init username/repo my-project')
    console.log()
})


function help() {
    program.parse(process.argv)
    if (program.args.length < 1) return program.help()
}
help()


let template = program.args[0]
const hasSlash = template.indexOf('/') > -1
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = program.clone || false

const tmp = path.join(home, '.sobuild-tempaltes', template)
if (program.offline) {
    console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
    template = tmp
}


console.log()
process.on('exit', () => {
    console.log()
})

if (inPlace || exists(to)) {
    inquirer.prompt([{
        type: 'confirm',
        message: inPlace
            ? '在当前文件夹生成项目?'
            : '项目已经存在, sobuild会合并基础配置(比如webpack, package.json, lint规范等), 是否继续? 建议继续, 统一配置!',
        name: 'ok'
    }]).then(answers => {
        if (answers.ok) {
            run()
        }
    }).catch(logger.fatal)
} else {
    run()
}

/**
 * 检查, 下载并生成项目.
 */

function run() {
    if (isLocalPath(template)) {
        const templatePath = getTemplatePath(template)
        if (exists(templatePath)) {
            generate(name, templatePath, to, err => {
                if (err) logger.fatal(err)
                console.log()
                logger.success('Generated "%s".', name)
            })
        } else {
            logger.fatal('本地模板没有找到.', template)
        }
    } else {
        checkVersion(() => {
            if (!hasSlash) {
                const officialTemplate = 'sobuild-webpack-template/' + template
                downloadAndGenerate(officialTemplate)
            } else {
                downloadAndGenerate(template)
            }
        })
    }
}

/**
 * 下载并编译模板.
 *
 * @param {String} template
 */

function downloadAndGenerate(template) {
    const spinner = ora('下载模板')
    spinner.start()
    // Remove if local template exists
    if (exists(tmp)) rm(tmp)
    download('github:liuzhaoxu1996/sobuild-webpack-template', tmp, { clone }, err => {
        spinner.stop()
        if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
        generate(name, tmp, to, err => {
            if (err) logger.fatal(err)
            console.log()
            logger.success('Generated "%s".', name)
        })
    })
}