#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const log = require('../build/lib/log')
const generate = require('../build/lib/generate').default
const checkVersion = require('../build/lib/check-version')
const localPath = require('../build/lib/local-path').default
const { fstat } = require('fs')
const { isLocalPath } = localPath
const { getTemplatePath } = localPath

program
    .usage('<template-name> [project-name]')
    .option('-c, --clone', '使用git clone')
    .option('--offline', '使用本地模板')


program.on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # 创建一个基于webpack的项目'))
    console.log('    $ sobuild init webpack my-project')
    console.log()
})


function help() {
    program.parse(process.argv)
    if (program.args.length < 1) return program.help()
}
help()


let template = program.args[0]
const hasSlash = template.indexOf('/') > -1
const rawName = program.args[1]
const inCurrent = !rawName || rawName === '.'
const name = inCurrent ? path.relative('../', process.cwd()) : rawName
const targetDir = path.resolve(rawName || '.')
const clone = program.clone || false

const tmp = path.join(home, '.build-tempaltes', template)
if (program.offline) {
    // /Users/sindresorhus/dev → ~/dev
    console.log(`> 使用已缓存的模板: ${chalk.yellow(tildify(tmp))}`)
    template = tmp
}


console.log()
process.on('exit', () => {
    console.log()
})

async function init() {
    if (exists(targetDir)) {
        if (inCurrent) {
            const { ok } = await inquirer.prompt([{
                type: 'confirm',
                message: '在当前文件夹生成项目?',
                name: 'ok'
            }])
            if (ok) {
                run()
            }
        } else {
            const { action } = inquirer.prompt([{
                name: 'action',
                type: 'list',
                message: '项目已经存在, so-build-cli会合并基础配置(比如webpack, package.json, lint规范等), 是否继续? 建议继续, 统一配置!',
                choices: [
                    { name: '是否覆盖配置', value: 'overwrite' },
                    { name: '是否合并配置', value: 'merge' },
                    { name: '取消', value: false }
                ]
            }])
            if (!action) {
                return 
            } else if (action === 'overwrite'){
                console.log(`\nRemoving ${chalk.cyan(targetDir)}...`)
                await fs.remove(targetDir);
                run()
            }else {
                run()
            }
        }
    } else {
        run()
    }
}
init();

/**
 * 检查, 下载并生成项目.
 */

function run() {
    if (isLocalPath(template)) {
        const templatePath = getTemplatePath(template)
        if (exists(templatePath)) {
            generate(name, templatePath, targetDir, err => {
                if (err) log.fatal(err)
                console.log()
                log.success('已生成 "%s".', name)
            })
        } else {
            log.fatal('本地模板没有找到.', template)
        }
    } else {
        checkVersion(() => {
            if (!hasSlash) {
                const officialTemplate = 'build-webpack-template/' + template
                downloadAndGenerate(officialTemplate)
            } else {
                downloadAndGenerate(template)
            }
        })
    }
}

/**
 * 下载并编译模板.
 *
 * @param {String} template
 */

function downloadAndGenerate(template) {
    const spinner = ora('下载模板')
    spinner.start()
    // Remove if local template exists
    if (exists(tmp)) rm(tmp)
    download('github:liuzhaoxu1996/build-webpack-template', tmp, { clone }, err => {
        spinner.stargetDirp()
        if (err) log.fatal('下载失败 ' + template + ': ' + err.message.trim())
        generate(name, tmp, targetDir, err => {
            if (err) log.fatal(err)
            console.log()
            log.success('生成 "%s".', name)
        })
    })
}